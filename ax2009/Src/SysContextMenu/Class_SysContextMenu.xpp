
    /// <summary>
    /// Verifies if the specified menu item can be displayed in the context menu.
    /// </summary>
    /// <param name="menuItemName">
    /// The name of the menu item.
    /// </param>
    /// <param name="menuItemType">
    /// The type of the menu item.
    /// </param>
    /// <returns>
    /// 1 if the menu item can be displayed; otherwise 0.
    /// </returns>
    public int verifyItem(identifiername menuItemName, MenuItemType menuItemType)
    {
        #resAppl
        #define.pathProjects('<\\\\Projects\\\\')
        #define.pathMethods('\\\\Methods>')
        boolean         docNode;
        UtilEntryLevel  utilEntryLevel;
        ClassNode       classNode;

        if (!firstNode ||
            !this.selectionCount())
        {
            return 0;
        }

        if (firstNode.AOTbitmapId() == #ImageDocumentationItem ||
            firstNode.AOTbitmapId() == #ImageDocumentationItemBlue ||
            (firstNode.AOTbitmapId() == #ImageFolder && firstNode.applObjectType() != UtilElementType::Menu))
        {
            docNode = true;
        }

        switch (menuItemType)
        {
            case MenuItemType::Display:
                switch (menuItemName)
                {
                    //
                    // Only show 'Reverse Engineer'menu item
                    // on projects and perspective as we only want to reverse
                    // engineer project elements
                    //
                    case menuitemdisplaystr( SysVisioAddIn ):
                        if ( firstNode.handle() == classnum(ProjectNode) &&     // launch from project node
                             match(#pathProjects,firstNode.treeNodePath()))
                        {
                            return 1;
                        }

                        if (firstNode.sysNodeType() == #NT_PERSPECTIVE)    // launch from perspective node
                        {
                            return 1;
                        }
                        return 0;

                    case menuitemdisplaystr(XRefReferencesUsedBy):
                        if (this.selectionCount() == 1 &&
                            !firstNode.AOTIsOld() &&                            //Does not work for old nodes
                            xRefNames::existTreeNodeAnyLayer(this.first()))     //HQ-19-36-TAHg
                            // xRefNames::existTreeNode(this.first(),true))     //only show Used By, if there are anything to show
                        {
                            return 1;
                        }
                        return 0;

                    case menuitemdisplaystr(SysTableMaps):
                        if (this.selectionCount() == 1 && firstUtilNode &&
                            firstUtilNode.applObjectType() == UtilElementType::Table &&
                            !firstNode.AOTIsOld() &&                            //Does not work for old nodes
                            (select utilElements where utilElements.Name == firstUtilNode.treeNodeName() && utilElements.RecordType == UtilElementType::TableMap).RecId)   // only show Used By Maps, if there are anything to show
                        {
                            return 1;
                        }
                        return 0;

                    case menuitemdisplaystr(XRefReferencesUsing):
                        if (this.selectionCount() == 1 &&
                            firstUtilNode &&
                            !firstNode.AOTIsOld() &&                            //Does not work for old nodes
                            xRefPaths::find(SysTreeNode::getPath(this.first())))       // only show Using, if anything are used
                        {
                            return 1;
                        }
                        return 0;

                    case menuitemdisplaystr(XRefNames):
                        if (this.selectionCount() == 1 &&
                            !firstNode.AOTIsOld() &&                            //Does not work for old nodes
                            xRefNames::existTreeNode(this.first(),false))       // only show Names, if there are anything to show
                        {
                            return 1;
                        }
                        return 0;

                    case menuitemdisplaystr(SysTreeHierarchyBrowser):
                        if (this.selectionCount() != 1 ||
                            firstNode.AOTIsOld()                                //Does not work for old nodes
                           )
                        {
                            return 0;
                        }
                        if (!docNode &&
                            (_firstType == UtilElementType::Class ||
                             _firstType == UtilElementType::ExtendedType ||
                             _firstType == UtilElementType::Table))
                        {
                            return 1;
                        }
                        return this.verifyDatasource(true, true);

                    case menuitemdisplaystr(SysUtilElements):
                        if (!docNode &&
                            this.selectionCount() == 1 &&
                            firstUtilNode &&
                            !firstNode.AOTIsOld())                               //Does not work for old nodes
                        {
                            return 1;
                        }
                        return 0;

                    // Shows the related Application Developer Documentation
                    case menuitemdisplaystr(SysApplDeveloperDocumentationOpen):
                        if (this.selectionCount() == 1 && firstUtilNode &&
                            !firstNode.AOTIsOld() &&                            //Does not work for old nodes
                            SysApplDeveloperDocumentationOpen::verifyItem(this)
                           )
                        {
                            return 1;
                        }
                        return 0;

                    case menuitemdisplaystr(SysTableBrowser):
                        if (this.selectionCount() != 1 ||
                            firstNode.AOTIsOld()                               //Does not work for old nodes
                           )
                        {
                            return 0;
                        }
                        if (!docNode &&
                            _firstType==UtilElementType::Table)
                        {
                            return 1;
                        }
                        return this.verifyDatasource();

                    case menuitemdisplaystr(SysTableForm):
                        if (aUtilElementTypeSeleced[UtilElementType::Table + 1] &&
                            !firstNode.AOTIsOld()                               //Does not work for old nodes
                            )
                        {
                            return 1;
                        }
                        return 0;

                    case menuitemdisplaystr(SysDictIndexShowDuplicates):
                        if (this.selectionCount() != 1 ||
                            firstNode.AOTIsOld()                               //Does not work for old nodes
                           )
                        {
                            return 0;
                        }
                        if (_firstType==UtilElementType::TableIndex)
                        {
                            return 1;
                        }
                        return 0;

                    case menuitemdisplaystr(SysWebBrowse):
                        if (!docNode &&
                            (_firstType == UtilElementType::WebMenu     ||
                             _firstType == UtilElementType::WebForm))
                        {
                            return 1;
                        }
                        return 0;

                    case menuitemdisplaystr(AxdWizard):
                        if(this.selectionCount() != 1)
                            return 0;

                        if(_firstType == UtilElementType::Query)
                        {
                            return 1;
                        }
                        return 0;

                }
                break;

            case MenuItemType::Output:
                switch (menuItemName)
                {
                    case menuitemoutputstr( SysXmlDocumentationCreateFile ):
                        if ( firstNode.handle() == classnum(ProjectNode) &&     // Only launch from project node
                             match(#pathProjects,firstNode.treeNodePath()))
                        {
                            return 1;
                        }
                        return 0;

                    case menuitemoutputstr(SysTableDefinition):
                        if (aUtilElementTypeSeleced[UtilElementType::Table + 1] &&
                            !firstNode.AOTIsOld()                               //Does not work for old nodes
                           )
                        {
                            return 1;
                        }
                        return 0;
                }
                break;

            case MenuItemType::Action:
                switch (menuItemName)
                {
                    case menuitemactionstr(SysUpgradeProjectMarkAsResolved):
                        return SysUpgradeProjectMarkAsResolved::canMarkAsResolved(this, SysUpgradeConflictManuallyResolved::Resolved);
                    case menuitemactionstr(SysUpgradeProjectMarkAsUnresolved):
                        return SysUpgradeProjectMarkAsResolved::canMarkAsResolved(this, SysUpgradeConflictManuallyResolved::Unresolved);

                    case menuitemactionstr(SysUpgradeProjectMarkAsResolvedRecursive):
                        return SysUpgradeProjectMarkAsResolved::canMarkAsResolvedIncludeSubnodes(this, SysUpgradeConflictManuallyResolved::Resolved);
                    case menuitemactionstr(SysUpgradeProjectMarkAsUnresolvedRecursi):
                        return SysUpgradeProjectMarkAsResolved::canMarkAsResolvedIncludeSubnodes(this, SysUpgradeConflictManuallyResolved::Unresolved);

                    case menuitemactionstr(SysUpgradeDetectConflictsRerun):
                        return SysUpgradeDetectConflicts::canDetectConflictsRerun(this);

                    case menuitemactionstr(SysCodeExplorer):
                        if (docNode)
                            return false;
                        return true;

                    case menuitemactionstr(xRefUpdate): // methods, appl. objects and list nodes can be xRef'ed
                        if (((_firstType &&
                              (_firstType == UtilElementType::Table                 ||
                               _firstType == UtilElementType::TableInstanceMethod   ||
                               _firstType == UtilElementType::TableStaticMethod     ||
                               _firstType == UtilElementType::ExtendedType          ||
                               _firstType == UtilElementType::Enum                  ||
                               _firstType == UtilElementType::LicenseCode           ||
                               _firstType == UtilElementType::ConfigurationKey      ||
                               _firstType == UtilElementType::SecurityKey           ||
                               _firstType == UtilElementType::TableCollection       ||
                               _firstType == UtilElementType::Perspective           ||
                               _firstType == UtilElementType::Class                 ||
                               _firstType == UtilElementType::ClassInstanceMethod   ||
                               _firstType == UtilElementType::ClassStaticMethod     ||
                               _firstType == UtilElementType::Form                  ||
                               _firstType == UtilElementType::Report                ||
                               _firstType == UtilElementType::ReportTemplate        ||
                               _firstType == UtilElementType::ReportSectionTemplate ||
                               _firstType == UtilElementType::Query                 ||
                               _firstType == UtilElementType::Job                   ||
                               _firstType == UtilElementType::Menu                  ||
                               _firstType == UtilElementType::DisplayTool           ||
                               _firstType == UtilElementType::OutputTool            ||
                               _firstType == UtilElementType::ActionTool            ||
                               _firstType == UtilElementType::Resource              ||
                               _firstType == UtilElementType::WebForm               ||
                               _firstType == UtilElementType::WebMenu               ||
                               _firstType == UtilElementType::WebUrlItem            ||
                               _firstType == UtilElementType::WebActionItem         ||
                               _firstType == UtilElementType::WebDisplayContentItem ||
                               _firstType == UtilElementType::WebOutputContentItem  ||
                               _firstType == UtilElementType::HelpFile
                              ) )  ||
                             firstNode.handle() == classnum(MemberFunction)     ||
                             firstNode.handle() == classnum(ProjectGroupNode)   ||
                             (firstNode.handle() == classnum(ProjectNode) && !match(#pathProjects,firstNode.treeNodePath())) ||  // can't xRef from the \Projects window

                             firstNode.treeNodePath() == TreeNode::rootNode().treeNodePath() ||
                             firstNode.treeNodePath() == #DataDictionaryPath    ||
                             firstNode.treeNodePath() == #TablesPath            ||
                             firstNode.treeNodePath() == #TableMapsPath         ||
                             firstNode.treeNodePath() == #ViewsPath             ||
                             firstNode.treeNodePath() == #ExtendedDataTypesPath ||
                             firstNode.treeNodePath() == #BaseEnumsPath         ||
                             firstNode.treeNodePath() == #LicenseCodesPath      ||
                             firstNode.treeNodePath() == #ConfigurationKeysPath ||
                             firstNode.treeNodePath() == #SecurityKeysPath      ||
                             firstNode.treeNodePath() == #TableCollectionsPath  ||
                             firstNode.treeNodePath() == #PerspectivesPath      ||
                             firstNode.treeNodePath() == #ClassesPath           ||
                             firstNode.treeNodePath() == #FormsPath             ||
                             firstNode.treeNodePath() == #ReportsPath           ||
                             firstNode.treeNodePath() == #SectionTemplatesPath  ||
                             firstNode.treeNodePath() == #QueriesPath           ||
                             firstNode.treeNodePath() == #JobsPath              ||
                             firstNode.treeNodePath() == #MenusPath             ||
                             firstNode.treeNodePath() == #MenuItemsPath         ||
                             firstNode.treeNodePath() == #MenuItemsDisplayPath  ||
                             firstNode.treeNodePath() == #MenuItemsOutputPath   ||
                             firstNode.treeNodePath() == #MenuItemsActionPath   ||
                             firstNode.treeNodePath() == #ResourcesPath         ||
                             firstNode.treeNodePath() == #WebPath               ||
                             firstNode.treeNodePath() == #WebFormsPath          ||
                             firstNode.treeNodePath() == #WebMenusPath          ||
                             firstNode.treeNodePath() == #WebMenuItemsPath      ||
                             firstNode.treeNodePath() == #WebMenuItemsUrlPath   ||
                             firstNode.treeNodePath() == #WebMenuItemsActionPath     ||
                             firstNode.treeNodePath() == #WebContentItemsPath   ||
                             firstNode.treeNodePath() == #WebContentItemsDisplayPath ||
                             firstNode.treeNodePath() == #WebContentItemsOutputPath  ||
                             firstNode.treeNodePath() == #HelpFilesPath  ||
                             match(#pathMethods,firstNode.treeNodePath())
                             ) &&
                             firstNode.handle() != classnum(DocNode) &&
                            !firstNode.AOTIsOld())
                        {
                            return 1;
                        }
                        return 0;

                    case menuitemactionstr(SysVersionControlCheckOut):
                        if (versioncontrol &&
                            versioncontrol.parmSysVersionControlSystem() &&
                            this.selectionCount() == 1 && firstApplObjectNode &&
                            !firstNode.AOTIsOld() &&                            //Does not work for old nodes
                            !allowEdit)
                        {
                            return 1;
                        }
                        return 0;

                    case menuitemactionstr(SysVersionControlUndoCheckOut):
                        if (versioncontrol &&
                            versioncontrol.parmSysVersionControlSystem() &&
                            this.selectionCount() == 1 && firstApplObjectNode &&
                            !firstNode.AOTIsOld() &&                            //Does not work for old nodes
                            allowEdit)
                        {
                            return 1;
                        }
                        return 0;

                    case menuitemactionstr(xRefUpdateTmpReferences):
                        if (!docNode &&
                            this.selectionCount() == 1 && firstUtilNode &&
                            !firstNode.AOTIsOld())                            //Does not work for old nodes
                        {
                            return 1;
                        }
                        return 0;

                    case menuitemactionstr(SysSourceReplaceSyntax):
                        if (!docNode &&
                            firstUtilNode &&
                            allowEdit &&
                            !firstNode.AOTIsOld())                             //Does not work for old nodes
                        {
                            return 1;
                        }
                        return 0;

                    case menuitemactionstr(SysSourceNameWash):
                        if (!docNode &&
                            firstUtilNode &&
                            allowEdit &&
                            !firstNode.AOTIsOld() &&
                            (_firstType &&
                              (_firstType == UtilElementType::Table                 ||
                               _firstType == UtilElementType::TableInstanceMethod   ||
                               _firstType == UtilElementType::TableStaticMethod     ||
                               _firstType == UtilElementType::Macro                 ||
                               _firstType == UtilElementType::Class                 ||
                               _firstType == UtilElementType::ClassInstanceMethod   ||
                               _firstType == UtilElementType::ClassStaticMethod     ||
                               _firstType == UtilElementType::Form                  ||
                               _firstType == UtilElementType::Report                ||
                               _firstType == UtilElementType::ReportTemplate        ||
                               _firstType == UtilElementType::ReportSectionTemplate ||
                               _firstType == UtilElementType::Query                 ||
                               _firstType == UtilElementType::Job                   ||
                               _firstType == UtilElementType::WebForm)))
                        {
                            return 1;
                        }
                        return 0;

                    case menuitemactionstr(SysBPCheck):
                        if  (_firstType &&_firstType == UtilElementType::Job)
                        {
                            return 0;
                        }
                        if (firstNode.AOTIsOld())
                        {
                            return 0;
                        }
                        return 1;

                    case menuitemactionstr(SysSourceReplaceText):
                        if (!docNode &&
                            allowEdit &&
                            this.selectionCount() == 1 &&
                            firstUtilNode &&
                            !firstNode.AOTIsOld())                            //Does not work for old nodes
                        {
                            return 1;
                        }
                        return 0;

                    case menuitemactionstr(sysCompare):
                        if (!firstNode.applObjectLayerMask())
                            return 0;
                        if (_firstType == UtilElementType::PrivateProject       ||
                            _firstType == UtilElementType::SharedProject)
                        {
                            return 0;
                        }
                        if (this.selectionCount() == 2)
                        {
                            return 1;
                        }
                        if (this.selectionCount() == 1)
                        {
                            return 1;
                        }
                        return 0;

                    case menuitemactionstr(sysCompileForward):
                        if (this.selectionCount() == 1 &&
                            !firstNode.AOTIsOld()      &&                         //Does not work for old nodes
                            _firstType==UtilElementType::Class)
                        {
                            return 1;
                        }
                        return 0;

                    case menuitemactionstr(sysTreenodeCopyToCurrentLayer):
                        if (firstNode && firstNode.AOTIsOld() && firstNode.AOTObjectNode())
                        {
                            return 1;
                        }
                        return 0;

                    case menuitemactionstr(SysTreeNodeApplObjectOpenNewWindow):
                        if (!docNode &&
                            anyUtilElementTypeSeleced &&
                            !firstNode.AOTIsOld())
                        {
                            return 1;
                        }
                        return 0;

                    case menuitemactionstr(SysTreeNodeOpenNewWindow),
                         menuitemactionstr(SysTreeNodeShowProperties):

                        if (docNode ||
                            firstNode.sysNodeType() == 27 ||    //Project nodes
                            firstNode.sysNodeType() == 29 ||
                            firstNode.sysNodeType() == 30 ||
                            firstNode.sysNodeType() == 31 )
                        {
                            return 0;
                        }
                        return 1;                                              //also for old

                    case menuitemactionstr(SysTreeNodeParentOpenNewWindow):
                        if (docNode ||
                            firstNode.sysNodeType() == 27 ||    //Project nodes
                            firstNode.sysNodeType() == 29 ||
                            firstNode.sysNodeType() == 30 ||
                            firstNode.sysNodeType() == 31 )
                        {
                            return 0;
                        }
                        if (!firstNode.AOTIsOld())
                        {
                            return 1;
                        }
                        return 0;

                    case menuitemactionstr(SysImpactAnalysis):
                        if (!docNode &&
                            SysTreeNode::isApplObject(firstNode) &&
                            !firstNode.AOTIsOld())                               //Does not work for old nodes
                        {
                            return 1;
                        }
                        return 0;

                    // Open using in window
                    case menuitemactionstr(SysOpenNewWindowTable):
                        return !firstNode.AOTIsOld() && SysOpenNewWindowTable::verifyItem(this);
                    case menuitemactionstr(SysOpenNewWindowExtendedType):
                        return !firstNode.AOTIsOld() && SysOpenNewWindowExtendedType::verifyItem(this);
                    case menuitemactionstr(SysOpenNewWindowEnum):
                        return !firstNode.AOTIsOld() && SysOpenNewWindowEnum::verifyItem(this);
                    case menuitemactionstr(SysOpenNewWindowSecurityKey):
                        return !firstNode.AOTIsOld() && SysOpenNewWindowSecurityKey::verifyItem(this);
                    case menuitemactionstr(SysOpenNewWindowConfigurationKey):
                        return !firstNode.AOTIsOld() && SysOpenNewWindowConfigurationKey::verifyItem(this);
                    case menuitemactionstr(SysOpenNewWindowClass):
                        return !firstNode.AOTIsOld() && SysOpenNewWindowClass::verifyItem(this);
                    case menuitemactionstr(SysOpenNewWindowForm):
                        return !firstNode.AOTIsOld() && SysOpenNewWindowForm::verifyItem(this);
                    case menuitemactionstr(SysOpenNewWindowReport):
                        return !firstNode.AOTIsOld() && SysOpenNewWindowReport::verifyItem(this);
                    case menuitemactionstr(SysOpenNewWindowMenuItem):
                        return !firstNode.AOTIsOld() && SysOpenNewWindowMenuItem::verifyItem(this);
                    case menuitemactionstr(SysOpenNewWindowFieldGroup):
                        return !firstNode.AOTIsOld() && SysOpenNewWindowFieldGroup::verifyItem(this);
                    case menuitemactionstr(SysOpenNewWindowQuery):
                        return !firstNode.AOTIsOld() && SysOpenNewWindowQuery::verifyItem(this);

                    // old layer
                    case menuitemactionstr(sysOpenOldSys):
                    case menuitemactionstr(sysOpenOldSyp):
                    case menuitemactionstr(sysOpenOldGls):
                    case menuitemactionstr(sysOpenOldGlp):
                    case menuitemactionstr(sysOpenOldFix):
                    case menuitemactionstr(sysOpenOldSl1):
                    case menuitemactionstr(sysOpenOldSl2):
                    case menuitemactionstr(sysOpenOldSl3):
                    case menuitemactionstr(sysOpenOldBus):
                    case menuitemactionstr(sysOpenOldBup):
                    case menuitemactionstr(sysOpenOldVar):
                    case menuitemactionstr(sysOpenOldVap):
                    case menuitemactionstr(sysOpenOldCus):
                    case menuitemactionstr(sysOpenOldCup):
                    case menuitemactionstr(sysOpenOldUsr):
                    case menuitemactionstr(sysOpenOldUsp):
                        utilEntryLevel = str2enum(utilEntryLevel, substr(menuItemName, strlen(menuItemName)-2, 3));
                        if (this.selectionCount() == 1 &&
                            oldMask & (1 << utilEntryLevel))
                        {
                            return 1;
                        }
                        return 0;

                    // Test jobs
                    case menuitemactionstr(SysTestToolbarOpen):
                        if (firstNode.handle() == classnum(ProjectNode)         ||
                            firstNode.handle() == classnum(ProjectGroupNode)    ||
                            firstNode.handle() == classnum(ClassNode))
                        {
                            if (firstNode.handle() == classnum(ClassNode))
                            {
                                classNode = firstNode;
                                if (!SysTestProject::implementsSysTestable(classNode.iD()))
                                {
                                    return 0;
                                }
                            }
                            return 1;
                        }
                        return 0;

                    case menuitemactionstr(AxdGenerateAxdQuery):
                        if(this.selectionCount() != 1)
                            return 0;

                        if(_firstType == UtilElementType::Form     ||
                           _firstType == UtilElementType::Report   ||
                           _firstType == UtilElementType::WebForm  ||
                           _firstType == UtilElementType::WebReport )
                        {
                            return 1;
                        }
                        return 0;

                    case menuitemactionstr(AifRegisterService):
                    {
                        if(this.selectionCount() != 1)
                            return 0;

                        if(_firstType == UtilElementType::Service)
                        {
                            return 1;
                        }
                        return 0;
                    }
                    // --> mazzy, 01.03.18, M005_SysProjectDefault
                    case menuitemactionstr(SysProjectDefault):
                    {
                        return _firstType == UtilElementType::PrivateProject
                            || _firstType == UtilElementType::SharedProject;
                    }
                    // <-- mazzy, 01.03.18, M005_SysProjectDefault
                }
        }
    //    infolog.mayReloadMenu(true);

        if (firstNode.AOTIsOld())
            return 0;
        return 1;
    }

